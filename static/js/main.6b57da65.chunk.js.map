{"version":3,"sources":["Login.js","First.js","App.js","serviceWorker.js","index.js"],"names":["Login","getAuth","useState","userName","password","error","userInfo","setUserInfo","handleChange","e","name","target","value","prevState","style","height","justifyContent","display","className","width","id","type","onChange","aria-label","aria-describedby","onClick","page","authState","First","slidesToShow","setSlides","selectedNumber","setSelected","show","toggleModal","useEffect","getSelectedFromLocalStorage","JSON","parse","key","localStorage","getItem","getFromLocalStorage","length","handleModal","setItem","stringify","storeInLocalStorage","marginTop","Dropdown","onSelect","Number","Toggle","variant","Menu","Array","keys","map","num","index","Item","eventKey","Button","clear","ControlledCarousel","Boolean","size","ModalComponent","Modal","onHide","Header","closeButton","Title","Body","Set","Footer","setIndex","direction","setDirection","Carousel","activeIndex","selectedIndex","slides","backgroundColor","src","alt","Caption","authInfo","Navbar","bg","Brand","href","Collapse","Text","App","auth","getComponent","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b57da65.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport const Login = ({ getAuth }) => {\n  const [userInfo, setUserInfo] = useState({\n    userName: \"\",\n    password: \"\",\n    error: \"\"\n  });\n\n  const handleChange = e => {\n    let name = e.target.name;\n    let value = e.target.value;\n    setUserInfo(prevState => ({\n      ...prevState,\n      [name]: value,\n      error: \"\"\n    }));\n  };\n\n  const handleSubmit = () => {\n    if (userInfo.userName === \"shaadi\" && userInfo.password === \"1234\") {\n      return getAuth(prevState => ({\n        ...prevState,\n        page: \"first\",\n        authState: true,\n        userInfo: { ...prevState.userInfo, name: userInfo.userName }\n      }));\n    }\n    setUserInfo(prevState => ({\n      ...prevState,\n      error: \"Username or Password invalid\"\n    }));\n  };\n  return (\n    <div style={{ height: \"500px\" }}>\n      <div style={{ justifyContent: \"center\", display: \"flex\" }}>\n        <div className=\"card\" style={{ width: \"18rem\" }}>\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">Login</h5>\n            <div className=\"card-text\">\n              <div className=\"input-group input-group-sm mb-3\">\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\" id=\"inputGroup-sizing-sm\">\n                    Username\n                  </span>\n                </div>\n                <input\n                  type=\"text\"\n                  name=\"userName\"\n                  onChange={handleChange}\n                  className=\"form-control\"\n                  aria-label=\"Sizing example input\"\n                  aria-describedby=\"inputGroup-sizing-sm\"\n                />\n              </div>\n\n              <div className=\"input-group input-group-sm mb-3\">\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\" id=\"inputGroup-sizing-sm\">\n                    Password\n                  </span>\n                </div>\n                <input\n                  type=\"text\"\n                  name=\"password\"\n                  onChange={handleChange}\n                  className=\"form-control\"\n                  aria-label=\"Sizing example input\"\n                  aria-describedby=\"inputGroup-sizing-sm\"\n                />\n              </div>\n              <div>{userInfo.error}</div>\n              <input\n                type=\"submit\"\n                className=\"form-control\"\n                onClick={handleSubmit}\n                value=\"Submit\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Dropdown, Carousel, Button, Modal } from \"react-bootstrap\";\n\nexport const First = () => {\n  const [slidesToShow, setSlides] = useState(0);\n  const [selectedNumber, setSelected] = useState([]);\n  const [show, toggleModal] = useState(false);\n\n  const handleCarousel = value => {\n    setSlides(Number(value));\n    setSelected(prevState => [...prevState, Number(value)]);\n  };\n\n  const storeInLocalStorage = (key = \"selectedNumber\") => {\n    return localStorage.setItem(key, JSON.stringify(selectedNumber));\n  };\n\n  const getFromLocalStorage = (key = \"selectedNumber\") => {\n    return localStorage.getItem(key);\n  };\n\n  const clearData = () => {\n    localStorage.clear();\n    setSelected([]);\n    setSlides(0);\n  };\n\n  useEffect(() => {\n    let getSelectedFromLocalStorage =\n      JSON.parse(getFromLocalStorage(\"selectedNumber\")) || [];\n    if (!!getSelectedFromLocalStorage && getSelectedFromLocalStorage.length) {\n      setSelected(getSelectedFromLocalStorage);\n      setSlides(\n        getSelectedFromLocalStorage[getSelectedFromLocalStorage.length - 1]\n      );\n    }\n  }, []);\n\n  const handleModal = () => {\n    toggleModal(prevState => !prevState);\n    storeInLocalStorage();\n  };\n  return (\n    <div>\n      <div style={{ marginTop: \"2rem\" }}>\n        <Dropdown onSelect={handleCarousel}>\n          <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n            {selectedNumber.length\n              ? `Selected ${selectedNumber[selectedNumber.length - 1]}`\n              : \"Select Number\"}\n          </Dropdown.Toggle>\n          <Dropdown.Menu>\n            {[...Array(20).keys()].map((num, index) => (\n              <Dropdown.Item key={num} eventKey={index + 1}>\n                {index + 1}\n              </Dropdown.Item>\n            ))}\n          </Dropdown.Menu>\n          <Button variant=\"primary\" className=\"ml-3\" onClick={clearData}>\n            Clear localStorage and State\n          </Button>\n          <div style={{ marginTop: \"2rem\" }}>\n            <ControlledCarousel slidesToShow={slidesToShow} />\n          </div>\n          {Boolean(slidesToShow) && (\n            <Button variant=\"primary\" size=\"sm\" onClick={handleModal}>\n              Finish\n            </Button>\n          )}\n        </Dropdown>\n        <ModalComponent\n          show={show}\n          selectedNumber={selectedNumber}\n          handleModal={handleModal}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction ModalComponent({ selectedNumber, show, handleModal }) {\n  return (\n    <Modal show={show} onHide={handleModal}>\n      <Modal.Header closeButton>\n        <Modal.Title>Selected Numbers</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{JSON.stringify([...new Set(selectedNumber)])}</Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={handleModal}>\n          Close\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nfunction ControlledCarousel({ slidesToShow = 0 }) {\n  const [index, setIndex] = useState(0);\n  const [direction, setDirection] = useState(null);\n\n  const handleSelect = (selectedIndex, e) => {\n    setIndex(selectedIndex);\n    setDirection(e.direction);\n  };\n\n  return (\n    <div>\n      <Carousel\n        style={{ height: \"350px\" }}\n        activeIndex={index}\n        direction={direction}\n        onSelect={handleSelect}\n      >\n        {[...Array(Number(slidesToShow)).keys()].map(slides => (\n          <Carousel.Item key={slides}>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                backgroundColor: \"grey\"\n              }}\n            >\n              <img\n                className=\"d-block\"\n                src=\"http://placekitten.com/200/300\"\n                alt=\"First slide\"\n              />\n            </div>\n\n            <Carousel.Caption>\n              <h3>{slides + 1} slide </h3>\n            </Carousel.Caption>\n          </Carousel.Item>\n        ))}\n      </Carousel>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Login } from \"./Login\";\nimport { First } from \"./First\";\nimport { Navbar } from \"react-bootstrap\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst Header = ({\n  authInfo: {\n    authState,\n    userInfo: { name }\n  }\n}) => {\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">\n          <img\n            alt=\"\"\n            src=\"https://img2.shaadi.com/assests/2016/images/home-logo.png\"\n            width=\"125\"\n            height=\"42\"\n            className=\"d-inline-block align-top\"\n          />\n        </Navbar.Brand>\n        <Navbar.Toggle />\n        {!!name && (\n          <>\n            <Navbar.Collapse className=\"justify-content-end\">\n              <Navbar.Text>\n                Signed in as: <a href=\"#login\">{name}</a>\n              </Navbar.Text>\n            </Navbar.Collapse>\n          </>\n        )}\n      </Navbar>\n    </>\n  );\n};\n\nfunction App() {\n  const [auth, authInfo] = useState({\n    authState: false,\n    page: \"home\",\n    userInfo: { name: \"\" }\n  });\n\n  useEffect(() => {\n    if (auth.authState) {\n      authInfo(prevState => ({\n        ...prevState,\n        page: \"first\"\n      }));\n    }\n  }, [auth.authState]);\n\n  const getComponent = page => {\n    switch (page) {\n      case \"home\":\n        return <Login getAuth={authInfo} />;\n      case \"first\":\n        return <First />;\n      default:\n        return <Login getAuth={authInfo} />;\n    }\n  };\n  return (\n    <div className=\"App\">\n      <Header authInfo={auth} />\n      {getComponent(auth.page)}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}